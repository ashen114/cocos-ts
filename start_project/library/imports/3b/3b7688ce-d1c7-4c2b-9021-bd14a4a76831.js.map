{"version":3,"sources":["assets\\scripts\\Star.ts"],"names":[],"mappings":";;;;;AAEM,IAAA,kBAAqC,EAAnC,oBAAO,EAAE,sBAA0B,CAAC;AAG5C;IAAkC,wBAAY;IAD9C;QAAA,qEA2DC;QAzDC,0BAA0B;QAE1B,gBAAU,GAAW,CAAC,CAAC,CAAC,2BAA2B;QAEnD,0BAA0B;QAC1B,UAAI,GAAS,IAAI,CAAC,CAAC,aAAa;;IAoDlC,CAAC;IAlDC,0BAA0B;IAE1B,qBAAM,GAAN,cAAgB,CAAC;IAEjB,oBAAK,GAAL,cAAe,CAAC;IAEhB,qBAAM,GAAN,UAAO,EAAU;QACf,yBAAyB;QACzB,IAAI,YAAY,GAAW,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;QACxE,IAAI,UAAU,GAAW,EAAE,CAAC;QAC5B,IAAI,CAAC,IAAI,CAAC,OAAO;YACf,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC;QAE7D,uBAAuB;QACvB,IAAI,IAAI,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE;YAC9C,SAAS;YACT,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,OAAO;SACR;IACH,CAAC;IAED,wBAAS,GAAT,cAAmB,CAAC;IAEpB,0BAA0B;IAC1B;;OAEG;IACH,gCAAiB,GAAjB;QACE,qBAAqB;QACrB,IAAI,SAAS,GAAY,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAExD,iBAAiB;QACjB,IAAI,IAAI,GAAW,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;QAEhE,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,uBAAQ,GAAR;QACE,kCAAkC;QAClC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QAEzB,kBAAkB;QAClB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QAEtB,aAAa;QACb,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC;IAtDD;QADC,QAAQ;4CACc;IAHJ,IAAI;QADxB,OAAO;OACa,IAAI,CA0DxB;IAAD,WAAC;CA1DD,AA0DC,CA1DiC,EAAE,CAAC,SAAS,GA0D7C;kBA1DoB,IAAI","file":"","sourceRoot":"/","sourcesContent":["import Game from \"./Game\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Star extends cc.Component {\r\n  ////////// 注入属性 //////////\r\n  @property\r\n  pickRadius: number = 0; // 星星和主角之间的距离小于这个数值时，就会完成收集\r\n\r\n  ////////// 默认属性 //////////\r\n  game: Game = null; // 对Game对象的引用\r\n\r\n  ////////// 生命周期 //////////\r\n\r\n  onLoad(): void {}\r\n\r\n  start(): void {}\r\n\r\n  update(dt: number): void {\r\n    // 根据 Game 脚本中的计时器更新星星透明度\r\n    let opacityRatio: number = 1 - this.game.timer / this.game.starDuration;\r\n    let minOpacity: number = 50;\r\n    this.node.opacity =\r\n      minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n\r\n    // 每帧判断和主角之间的距离是否小于收集距离\r\n    if (this.getPlayerDistance() < this.pickRadius) {\r\n      // 调用收集行为\r\n      this.onPicked();\r\n      return;\r\n    }\r\n  }\r\n\r\n  onDestroy(): void {}\r\n\r\n  ////////// 功能函数 //////////\r\n  /**\r\n   * 返回星星与主角之间的距离\r\n   */\r\n  getPlayerDistance(): number {\r\n    // 根据 player 节点位置判断距离\r\n    let playerPos: cc.Vec2 = this.game.player.getPosition();\r\n\r\n    // 根据两点位置计算两点之间距离\r\n    let dist: number = this.node.getPosition().sub(playerPos).mag();\r\n\r\n    return dist;\r\n  }\r\n\r\n  /**\r\n   * 当星星被收集时\r\n   */\r\n  onPicked() {\r\n    // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\r\n    this.game.spawnNewStar();\r\n\r\n    // 调用 Game 脚本的得分方法\r\n    this.game.gainScore();\r\n\r\n    // 然后销毁当前星星节点\r\n    this.node.destroy();\r\n  }\r\n}\r\n"]}